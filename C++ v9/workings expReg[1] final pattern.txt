----#---##------
----#---#-###### -1
----#---#------- &
scrap this

Case 1: exact power of 2 (easy).

Case 2: something like -----#----##-----:

Old (don't think this is strict enough):
	----#---##------
	-----#---##----- >> 1
	---------#------ &
	then must have result != 0 && (result << 1) < (orig >> 1)

	if we had:
	----##---#------
	-----##---#----- >> 1
	-----#---------- &
	then result << 1:
	----#-----------
	orig >> 1:
	-----##---#-----
	so (result << 1) > (orig >> 1), so this fails (correctly).

	if we had:
	-----### (todo, but now old)

New approach:
	need a way to ensure that there's only a single string of two 1s
	
	-----#----##----- x
	------#----##---- x >> 1
	-----------#----- x & (x >> 1) = y
	
	require that to be non-zero and a power of 2: y && !(y & (y - 1))
	(from https://graphics.stanford.edu/~seander/bithacks.html#DetermineIfPowerOf2)
	this ensures there is only a single string of length 2
	
	now remove the string of length 2 from the original:
	-----#----##----- x
	-----------#----- y
	----------#------ y << 1
	----------##----- y | (y << 1)
	##########--##### ~(y | (y << 1))
	-----#----------- x & ~(y | (y << 1)) = z
	
	require that to be non-zero and a power of 2: z && !(z & (z - 1))
	
	now,
	-----#----##----- x
	-----------#----- y
	-----#----------- z
	(ensure they're in the right order, but possibly-better approach below)	

All cases:	
alternative approach that'll handle ### as well:
remove the leading 1
then check that the rest has:
	a single string of two 1s
	or no 1s
	or a single 1 at the right position
NO removing the leading 1 is too expensive

Instead:
Clear the trailing 1
Compare the difference so we extract a value containing just that trailing 1
Clear the next trailing 1
Again extract a value with just that trailing 1
Combine the two
Check if length 2 string by shifting and ANDing
If so, check if what's left is a power of 2
If not, check if what's left is zero and they're separated by
a single 0 bit (again by shifting and Anding)

Clearing a trailing 1 can be done using (x &= x - 1) (source: https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan)

x = orig = whatever value;
x &= (x - 1);  // clear the trailing 1
a = orig & ~x; // extract a mask with just the bit that was cleared
x &= (x - 1);  // clear the next trailing 1
b = orig & ~x; // extract a mask with just the bit that was cleared
comb1 = a & (b >> 1);
comb2 = a & (b >> 2);
powOf2(comb1) && powOf2(x) || x == 0 && powOf2(comb2)

Idk if these simplifications are valid, will need to test many values:
Nope at least some aren't, e.g. replacing && with & in powOf2() won't work
as one number could have the MSB ON while the other has the LSB ON, resulting
in false (with &) when we wanted true (as with &&).
powOf2(comb1) & powOf2(x) | x == 0 & powOf2(comb2)
(comb1 && !(comb1 & (comb1 - 1))) & (x && !(x & (x - 1))) | x == 0 & (comb2 && !(comb2 & (comb2 - 1)))
comb1 & !(comb1 & (comb1 - 1)) & x & !(x & (x - 1)) | !x & comb2 & !(comb2 & (comb2 - 1))
x & comb1 & !(comb1 & (comb1 - 1) | x & (x - 1)) | !x & comb2 & !(comb2 & (comb2 - 1))

Trying again:
powOf2(comb1) && powOf2(x) || x == 0 && powOf2(comb2)
(comb1 && !(comb1 & (comb1 - 1))) && (x && !(x & (x - 1))) || x == 0 && (comb2 && !(comb2 & (comb2 - 1)))
(comb1 && !(comb1 & (comb1 - 1))) && (x && !(x & (x - 1))) || !x && (comb2 && !(comb2 & (comb2 - 1)))
comb1 && !(comb1 & (comb1 - 1)) && x && !(x & (x - 1)) || !x && comb2 && !(comb2 & (comb2 - 1))
x && comb1 && !(comb1 & (comb1 - 1)) && !(x & (x - 1)) || !x && comb2 && !(comb2 & (comb2 - 1))
NO WE DON'T, X != ORIG: But actually, we know that x is not zero (already check for that elsewhere) and not a power of 2 (same) so it must have at least 2 on bits. We can therefore use the other version of powOf2(x).

SCRAP THIS: Trying again:
// powOf2(comb1) && powOf2(x) || x == 0 && powOf2(comb2)
// (comb1 && !(comb1 & (comb1 - 1))) && ((x & (x - 1)) == 0) || x == 0 && (comb2 && !(comb2 & (comb2 - 1)))
// comb1 && !(comb1 & (comb1 - 1)) && !(x & (x - 1)) || !x && comb2 && !(comb2 & (comb2 - 1))
// comb1 && !(comb1 & (comb1 - 1) | x & (x - 1)) || !x && comb2 && !(comb2 & (comb2 - 1))

Back to before:
x && comb1 && !(comb1 & (comb1 - 1)) && !(x & (x - 1)) || !x && comb2 && !(comb2 & (comb2 - 1))
x && comb1 && !(comb1 & (comb1 - 1) | x & (x - 1)) || !x && comb2 && !(comb2 & (comb2 - 1))